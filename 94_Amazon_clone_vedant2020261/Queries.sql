use Amazon_clone;

-- 1----
 -- Using the UPDATE statement to update the quantity of a particular item in the inventory of a particular seller. 
 -- We are updating the quantity to a new value for a specific seller_id and item_id.
UPDATE Seller_Inventory 
SET quantity = 3 
WHERE seller_id = 5 AND item_id = 147;

-- 2----
 -- Using the ALTER statement to add and drop the column of DOB in the customer table. 
-- ALTER TABLE Customer
-- DROP COLUMN DOB;
-- ALTER TABLE Customer
-- ADD DOB date;

-- 3----
 -- Using the SUM() function to calculate the total revenue generated by a particular seller. 
 -- We are selecting the sum of (price * quantity) from the Bill table for a specific seller_id.
SELECT SUM(b.price * b.quantity) 
FROM Bill b 
WHERE b.seller_id = 5;

-- 4----
 -- Using the DELETE statement to delete a particular customer and all their associated data from the database. 
 -- We are deleting the row from the Customer table where the customer_id matches the given value.
-- Find the row in Deliver that references the row in Customer_Location
DELETE FROM Deliver 
WHERE customer_id = 10;
DELETE FROM Bill 
WHERE customer_id = 10;
DELETE FROM Payment 
WHERE customer_id = 10;
DELETE FROM Customer
WHERE customer_id = 10;

-- 5----
 -- Using a JOIN statement to join the Items and Bill tables based on item_id. 
 -- We are then grouping the results by item_name and using the SUM() function to calculate the total quantity sold for each item. 
 -- Then sorting the results in descending order based on total_quantity and limiting the output to 5 rows.
SELECT i.item_name, SUM(b.quantity) as total_quantity 
FROM Items i 
JOIN Bill b ON i.item_id = b.item_id 
GROUP BY i.item_name 
ORDER BY total_quantity DESC 
LIMIT 5;

-- 6----
 -- Using a JOIN statement to join the Items and Seller_Inventory tables based on item_id. 
 -- We are then grouping the results by category and using the AVG() function to calculate the average price of items in each category.
SELECT i.category, AVG(si.price) as average_price 
FROM Items i 
JOIN Seller_Inventory si ON i.item_id = si.item_id 
GROUP BY i.category;

-- 7----
 -- Using the COUNT() function to count the number of rows in the Bill table.
 -- We are selecting the count of rows where the seller_id matches the given value.
SELECT COUNT(*) 
FROM Bill b 
WHERE b.seller_id = 10;

-- 8----
SELECT seller_name
FROM Seller
WHERE seller_id IN (SELECT seller_id 
					FROM Seller_Inventory 
                    WHERE item_id IN (SELECT item_id 
									  FROM InStock));
                                      
-- 9----
SELECT AVG(price) 
FROM Seller_Inventory 
WHERE seller_id = (SELECT seller_id 
				   FROM Seller 
                   WHERE seller_name = 'Michelle Ford');

-- 10----                   
SELECT *
FROM Seller s
WHERE NOT EXISTS (SELECT *
				  FROM Seller_Inventory si
				  WHERE si.seller_id = s.seller_id
                  AND si.item_id = (SELECT item_id 
								    FROM Items 
                                    WHERE item_name = 'imagine'));
                            
-- 11----                                               
SELECT c.customer_name, p.payment_mode, SUM(b.price * b.quantity) AS payment_amount
FROM Customer c
INNER JOIN Payment p ON c.customer_id = p.customer_id
INNER JOIN Bill b ON c.customer_id = b.customer_id
WHERE b.price * b.quantity > 5000
GROUP BY c.customer_id, p.payment_mode;

-- 12----                                               
-- CREATE VIEW InStock_Details AS
-- SELECT i.item_name, s.seller_name, si.price
-- FROM Items i
-- INNER JOIN Seller_Inventory si ON i.item_id = si.item_id
-- INNER JOIN Seller s ON si.seller_id = s.seller_id
-- INNER JOIN InStock ist ON si.item_id = ist.item_id
-- WHERE ist.quantity > 5;

-- 13----   
SELECT i.item_name, i.category, COUNT(DISTINCT si.seller_id) AS seller_count
FROM Items i
INNER JOIN Seller_Inventory si ON i.item_id = si.item_id
GROUP BY i.item_name, i.category;

-- 14----   
SELECT seller_name FROM Seller s
WHERE EXISTS (SELECT * FROM Seller_Inventory si
			  WHERE si.seller_id = s.seller_id
			  AND NOT EXISTS (SELECT * FROM InStock i
							  WHERE i.item_id = si.item_id));

-- 15----   
SELECT seller_id AS id, factory_no AS location_id, street, city, state, 'Seller' AS type
FROM Seller_Location
UNION
SELECT customer_id AS id, flat_no AS location_id, street, city, state, 'Customer' AS type
FROM Customer_Location;















